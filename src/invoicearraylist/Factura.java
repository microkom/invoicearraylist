    33    /*34    nuevaLinea(LineaFactura lf): Añadir una línea a la factura. En caso35    que lo haya podido añadir debe devolver el número de la linea en la36    que la ha insertado. En caso contrario (vector lleno) debe devolver -37    1. 38    */39    40    Iterator<LineaFactura> it = lineas.iterator();41    LineaFactura e = null;42    43    while (lineas.hasNext()) {44            e = it.next();45            System.out.println(e.);46    }47    public int nuevaLinea(ArrayList<LineaFactura> lf){48        int vector=-1;49        int i,j;50        boolean insertado=false;51        52        j=buscarProducto(lf.getProducto().getNombre());53        54        //comprobación de que el producto ya aparece en la factura o no 55        if (j!=-1){56            //suma de cantidades 57            this.lineas[j].setCantidad(lineas[j].getCantidad()+lf.getCantidad());58            this.lineas[j].setDescuento(lf.getDescuento());59        }else{60        for (i=0;i<this.lineas.length && insertado==false;i++){61            if(this.lineas[i]==null){62                lineas[i]=lf;63                insertado=true;64                vector=i;65            }66        }67        }68        return vector;69    }7071    //borrarLineaNumero(int numLinea) : Elimina la linea con el número indicado72    public void borrarLineaNumero(int numLinea){73        //borrado del vector recibiendo la posición exacta 74        this.lineas[numLinea]=null;75        76        //agrupar el contenido del vector al inicio77        ordenVector();78    }79    80    //Agrupación del vector al inicio cuando tiene espacios blancos81    public void ordenVector(){82        for(int i=0;i<lineas.length;i++){83            //buscar lineas que no están vacías
